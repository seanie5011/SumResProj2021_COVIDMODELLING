# pylint: disable=redefined-outer-name,protected-access,line-too-long
"""
    Tests for Matlab code generator

"""

import pytest

from PyDSTool import FuncSpec

from PyDSTool.core.codegenerators.matlab import Matlab, MATLAB_AUX_TEMPLATE


def test_matlab_funcspec_for_ds_with_single_var_and_single_param():
    args = {
        'name': 'fun_with_var_and_par',
        'targetlang': 'matlab',
        'vars': ['x'],
        'pars': ['p'],
        'varspecs': {'x': 'p * x ** 3 - 1'},
        'fnspecs': {'myaux': (['x'], 'x**2 + p')},
    }
    fs = FuncSpec(args)
    assert fs.spec[0].split('\n') == [
        'function [vf_, y_] = vfield(vf_, t_, x_, p_)',
        '% Vector field definition for model fun_with_var_and_par',
        '% Generated by PyDSTool for ADMC++ target',
        '',
        '',
        '% Parameter definitions',
        '',
        '\tp = p_(1);',
        '',
        '% Variable definitions',
        '',
        '\tx = x_(1);',
        '',
        '',
        'y_(1) = p*x^3-1;',
        '',
        '',
        '',
    ]

    assert fs.auxfns['myaux'][0].split('\n') == [
        'function y_ = myaux(x__,  p_)',
        '% Auxilliary function myaux for model fun_with_var_and_par',
        '% Generated by PyDSTool for ADMC++ target',
        '',
        '',
        '% Parameter definitions',
        '',
        '\tp = p_(1);',
        ' ',
        '',
        '',
        'y_ = x__^2+p;',
        '',
        ''
    ]

    assert all(fn in fs._pyauxfns.keys() for fn in [
        'getbound',
        'getindex',
        'globalindepvar',
        'heav',
        'if',
        'initcond',
    ])

    assert 'myaux' in fs._pyauxfns.keys()


def test_matlab_funspec_for_macro_raises_exception():
    with pytest.raises(ValueError):
        FuncSpec({
            'vars': ['z1', 'z2', 'z3'],
            'targetlang': 'matlab',
            'varspecs': {
                'z[i]': 'for(i, 1, 3, z[i]**2)',
            },
        })


def test_matlab_funspec_if_raises_exception():
    with pytest.raises(NotImplementedError):
        FuncSpec({
            'name': 'single_var',
            'targetlang': 'matlab',
            'vars': ['x'],
            'varspecs': {'x': 'if(x < 0, x, x**3)'},
        })


def test_matlab_auxspec_if_raises_exception():
    with pytest.raises(NotImplementedError):
        FuncSpec({
            'name': 'single_var',
            'targetlang': 'matlab',
            'vars': ['x'],
            'varspecs': {'x': 'x**3'},
            'fnspecs': {'myaux': (['x'], 'if(x < 0, x, x**3)')},
        })


def test_matlab_funcspec_has_python_user_auxfn_interface():
    args = {
        'name': 'test_user_auxfn_interface',
        'targetlang': 'matlab',
        'vars': ['x'],
        'pars': ['p'],
        'varspecs': {'x': 'p * x - 1'},
        'fnspecs': {'myaux': (['x'], 'x**2 + p')},
    }
    fs = FuncSpec(args)

    assert fs._user_auxfn_interface['myaux'].split('\n') == [
        'def myaux(self,x,__parsinps__=None):',
        '\tif __parsinps__ is None:',
        '\t\t__parsinps__=self.map_ixs(self.genref)',
        '\treturn self.genref._auxfn_myaux(__parsinps__,x)',
        ''
    ]


def test_matlab_funcspec_inserts_additional_code_in_vfield():
    start = 'disp("START");'
    end = 'disp("END");'
    args = {
        'name': 'test_codeinsert',
        'targetlang': 'matlab',
        'vars': ['x'],
        'pars': ['p'],
        'varspecs': {'x': 'p * x - 1'},
        'fnspecs': {'myaux': (['x'], 'x**2 + p')},
        'codeinsert_start': start,
        'codeinsert_end': end,
    }
    fs = FuncSpec(args)
    assert fs.spec[0].split('\n') == [
        'function [vf_, y_] = vfield(vf_, t_, x_, p_)',
        '% Vector field definition for model test_codeinsert',
        '% Generated by PyDSTool for ADMC++ target',
        '',
        '',
        '% Parameter definitions',
        '',
        '\tp = p_(1);',
        '',
        '% Variable definitions',
        '',
        '\tx = x_(1);',
        '',
        '% Verbose code insert -- begin ',
        start,
        '% Verbose code insert -- end ',
        '',
        '',
        'y_(1) = p * x - 1;',
        '',
        '% Verbose code insert -- begin ',
        end,
        '% Verbose code insert -- end ',
        '',
        '',
        '',
    ]

    assert fs.auxfns['myaux'][0].split('\n') == [
        'function y_ = myaux(x__,  p_)',
        '% Auxilliary function myaux for model test_codeinsert',
        '% Generated by PyDSTool for ADMC++ target',
        '',
        '',
        '% Parameter definitions',
        '',
        '\tp = p_(1);',
        ' ',
        '',
        '',
        'y_ = x__^2+p;',
        '',
        ''
    ]

    assert all(fn in fs._pyauxfns.keys() for fn in [
        'getbound',
        'getindex',
        'globalindepvar',
        'heav',
        'if',
        'initcond',
    ])

    assert 'myaux' in fs._pyauxfns.keys()


def test_matlab_funcspec_with_reuseterms():
    args = {
        'name': 'fs_with_reuseterms',
        'vars': ['x', 'y'],
        'varspecs': {'x': 'cy', 'y': 'sx'},
        'reuseterms': {'cos(y)': 'cy', 'sin(x)': 'sx'},
        'targetlang': 'matlab',
    }

    fs = FuncSpec(args)
    assert fs.spec[0].split('\n') == [
        'function [vf_, y_] = vfield(vf_, t_, x_, p_)',
        '% Vector field definition for model fs_with_reuseterms',
        '% Generated by PyDSTool for ADMC++ target',
        '',
        '',
        '% Parameter definitions',
        '',
        '',
        '% Variable definitions',
        '',
        '\tx = x_(1);',
        '\ty = x_(2);',
        '',
        '% reused term definitions ',
        'cy = cos(y);',
        'sx = sin(x);',
        '',
        'y_(1) = cy;',
        'y_(2) = sx;',
        '',
        '',
        '',
    ]


def test_matlab_funcspec_with_reuseterms_and_aux_funcs():
    args = {
        'name': 'fs_with_reuseterms',
        'vars': ['x', 'y'],
        'varspecs': {'x': 'cy + myaux(x)', 'y': 'sx'},
        'reuseterms': {'cos(y)': 'cy', 'sin(x)': 'sx'},
        'targetlang': 'matlab',
        'fnspecs': {
            'myaux': (['x'], 'x**2'),
            'aux_with_reusterms': (['x', 'y'], 'pow(x, 3) + cy'),
            'aux_with_reuseterms_and_myaux': (['x', 'y'], 'sx - myaux(x)'),
        },
    }

    fs = FuncSpec(args)
    assert fs.spec[0].split('\n') == [
        'function [vf_, y_] = vfield(vf_, t_, x_, p_)',
        '% Vector field definition for model fs_with_reuseterms',
        '% Generated by PyDSTool for ADMC++ target',
        '',
        '',
        '% Parameter definitions',
        '',
        '',
        '% Variable definitions',
        '',
        '\tx = x_(1);',
        '\ty = x_(2);',
        '',
        '% reused term definitions ',
        'cy = cos(y);',
        'sx = sin(x);',
        '',
        'y_(1) = cy + myaux(x, p_);',
        'y_(2) = sx;',
        '',
        '',
        '',
    ]

    assert fs.auxfns['myaux'][0].split('\n') == [
        'function y_ = myaux(x__,  p_)',
        '% Auxilliary function myaux for model fs_with_reuseterms',
        '% Generated by PyDSTool for ADMC++ target',
        '',
        '',
        '% Parameter definitions',
        '',
        ' ',
        '',
        '',
        'y_ = x__^2;',
        '',
        ''
    ]

    assert fs.auxfns['myaux'][1].split('\n') == [
        'function y_ = myaux(x__,  p_)',
        '% Auxilliary function myaux for model fs_with_reuseterms',
        '% Generated by PyDSTool for ADMC++ target',
        '',
        '',
    ]

    assert fs.auxfns['aux_with_reusterms'][0].split('\n') == [
        'function y_ = aux_with_reusterms(x__, y__,  p_)',
        '% Auxilliary function aux_with_reusterms for model fs_with_reuseterms',
        '% Generated by PyDSTool for ADMC++ target',
        '',
        '',
        '% Parameter definitions',
        '',
        ' ',
        '',
        '',
        '% reused term definitions ',
        'cy = cos(y__);',
        '',
        'y_ = x__^3+cy;',
        '',
        ''
    ]

    assert fs.auxfns['aux_with_reuseterms_and_myaux'][0].split('\n') == [
        'function y_ = aux_with_reuseterms_and_myaux(x__, y__,  p_)',
        '% Auxilliary function aux_with_reuseterms_and_myaux for model fs_with_reuseterms',
        '% Generated by PyDSTool for ADMC++ target',
        '',
        '',
        '% Parameter definitions',
        '',
        ' ',
        '',
        '',
        '% reused term definitions ',
        'sx = sin(x__);',
        '',
        'y_ = sx - myaux(x__, p_);',
        '',
        ''
    ]


_NAME = 'myaux'
_SPEC = (['x', 'y', 'z'], 'x * z + y')
_TEMPLATE = MATLAB_AUX_TEMPLATE.split('\n')


@pytest.fixture
def fspec(mocker):
    fspec = mocker.Mock(spec=FuncSpec)
    fspec.name = 'funspec'
    fspec.pars = []
    fspec.vars = ['x', 'y', 'z']
    fspec._auxfnspecs = {_NAME: _SPEC}
    fspec.auxfns = {_NAME: _SPEC}
    fspec.reuseterms = {}
    return fspec


def test_signature(fspec):
    _, sig = Matlab(fspec).generate_auxfun(_NAME, _SPEC)

    assert _TEMPLATE[0].format(
        name=_NAME,
        args=', '.join([str(v) + '__' for v in _SPEC[0]]),
    ) == sig.split('\n')[0]  # FIXME: signature should be single string


def test_intro_comment_follows_signature(fspec):
    code, _ = Matlab(fspec).generate_auxfun(_NAME, _SPEC)

    assert _TEMPLATE[1].format(name=_NAME, specname=fspec.name) in code
    assert _TEMPLATE[2] in code


def test_pardef_section_for_no_params(fspec):
    fspec.pars = []
    code, _ = Matlab(fspec).generate_auxfun(_NAME, _SPEC)

    # FIXME: do not insert "Parameter definitions" if no par definitions
    assert '% Parameter definitions' in code


def test_pardef_section_for_single_param(fspec):
    fspec.pars = ['p']
    code, _ = Matlab(fspec).generate_auxfun(_NAME, _SPEC)

    assert '% Parameter definitions' in code
    assert 'p = p_(1);' in code


def test_pardef_section_for_two_params(fspec):
    fspec.pars = ['p', 'q']
    code, _ = Matlab(fspec).generate_auxfun(_NAME, _SPEC)

    assert '% Parameter definitions' in code
    assert 'p = p_(1);' in code
    assert 'q = p_(2);' in code


def test_reuseterms_section_when_no_reuseterms(fspec):
    code, _ = Matlab(fspec).generate_auxfun(_NAME, _SPEC)

    assert '% reused term definitions ' not in code


def test_reuseterms_section(fspec):
    spec = (['x', 'y', 'z'], 'xz + y')
    fspec.reuseterms = {'x*z': 'xz'}

    code, _ = Matlab(fspec).generate_auxfun(_NAME, spec)

    assert '% reused term definitions ' in code
    assert 'xz = x__*z__;' in code
    assert 'y_ = xz + y__;' in code


def test_auxfun_value(fspec):
    code, _ = Matlab(fspec).generate_auxfun(_NAME, _SPEC)

    assert 'y_ = x__ * z__ + y__;' in code
